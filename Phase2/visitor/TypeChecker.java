//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import visitor.SymbolTable;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class TypeChecker<R,A> implements GJVisitor<R,A> {
   SymbolTable symTab = new SymbolTable();
   String exprList = "";

   public void symTabDefine(SymbolTable s){
      symTab = s;
   }
   public void error(){
      System.out.println("Type error");
      System.exit(0);
   }
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String cname =(String)n.f1.accept(this, (A)"getId");
      symTab.currScope.className = cname;
      symTab.currScope.depth = 1;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String cname = (String)n.f1.accept(this, (A)"getId");
      symTab.currScope.depth = 1;
      symTab.currScope.className = cname;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String cname = (String)n.f1.accept(this, (A)"getId");
      symTab.currScope.depth = 1;
      symTab.currScope.className = cname;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String fname = (String)n.f2.accept(this, (A)"getId");
      symTab.currScope.depth = 2;
      symTab.currScope.funcName = fname;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String exprType = (String)n.f10.accept(this, argu);
      symTab.checkReturnType(exprType);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String idType = (String)n.f0.accept(this, (A)"getIdType");
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!symTab.validAssn(idType,exprType)){
         //System.out.println("From assn:" + idType + " " + exprType);
         this.error();
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String idType = (String)n.f0.accept(this, (A)"getIdType");
      if(!idType.equals("int[]")){
         //System.out.println("From Arrassn1:" + idType);
         this.error();
      }
      n.f1.accept(this, argu);
      String exprType1 = (String)n.f2.accept(this, argu);
      if(!exprType1.equals("int")){
         //System.out.println("From Arrassn2:" + exprType1);
         this.error();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String exprType2 = (String)n.f5.accept(this, argu);
      if(!exprType2.equals("int")){
         //System.out.println("From Arrassn3:" + exprType2);
         this.error();
      }
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      if(!exprType.equals("boolean")){
         //System.out.println("From ifthen:" + exprType);
         this.error();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      if(!exprType.equals("boolean")){
         //System.out.println("From ifthenelse:" + exprType);
         this.error();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      if(!exprType.equals("boolean")){
         //System.out.println("From while:" + exprType);
         this.error();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(exprType.equals("int")){
         return (R)exprType;
      }
      //System.out.println("From print:" + exprType);
      this.error();
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      String type = (String)n.f0.accept(this, argu);
      return (R)type;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String type1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String) n.f2.accept(this, argu);
      if(type1.equals(type2) && type1.equals("boolean")){
         return (R) "boolean";
      }
      else{
         //System.out.println("From ANd:" + type1 +" " + type2);
         this.error();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String type1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String) n.f2.accept(this, argu);
      if(type1.equals(type2) && type1.equals("boolean")){
         return (R) "boolean";
      }
      else{
         //System.out.println("From OR:" + type1 +" " + type2);
         this.error();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String type1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String) n.f2.accept(this, argu);
      if(type1.equals(type2) && type1.equals("int")){
         return (R) "boolean";
      }
      else{
         //System.out.println("From <=:" + type1 +" " + type2);
         this.error();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String type1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String) n.f2.accept(this, argu);
      if(type1.equals(type2)){
         return (R)"boolean";
      }
      else{
         if(symTab.isClass(type1) && symTab.isClass(type2)){
            if(symTab.related(type1, type2)){
               return (R)"boolean";
            }
         }
         //System.out.println("From neq:" + type1 +" " + type2);
         this.error();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String type1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String) n.f2.accept(this, argu);
      if(type1.equals(type2) && type1.equals("int")){
         return (R) "int";
      }
      else{
         //System.out.println("From +:" + type1 +" " + type2);
         this.error();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String type1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String) n.f2.accept(this, argu);
      if(type1.equals(type2) && type1.equals("int")){
         return (R) "int";
      }
      else{
         //System.out.println("From -:" + type1 +" " + type2);
         this.error();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String type1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String) n.f2.accept(this, argu);
      if(type1.equals(type2) && type1.equals("int")){
         return (R) "int";
      }
      else{
         //System.out.println("From -:" + type1 +" " + type2);
         this.error();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String type1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String) n.f2.accept(this, argu);
      if(type1.equals(type2) && type1.equals("int")){
         return (R) "int";
      }
      else{
         //System.out.println("From /:" + type1 +" " + type2);
         this.error();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String type1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(type1.equals("int[]") && type2.equals("int")){
         return (R)"int";
      }
      else{
         //System.out.println("From arrlook:" + type1 +" " + type2);
         this.error();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String type1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(type1.equals("int[]")){
         return (R) "int";
      }
      //System.out.println("From arrlen:" + type1);
      this.error();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      String cname = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String fname = (String)n.f2.accept(this, (A)"getId");
      n.f3.accept(this, argu);
      String fargs = (String)n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      String funcType = symTab.validFunCall(cname,fname,fargs);
      if(funcType == ""){
         //System.out.println("From funcall:" + cname +" " + fname + " " +fargs);
         this.error();
      }
      return (R)funcType;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      String cond = (String) n.f0.accept(this, argu);
      if(!cond.equals("boolean")){
         //System.out.println("From ter:" + cond);
         this.error();
      }
      n.f1.accept(this, argu);
      String type1 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String type2 = (String)n.f4.accept(this, argu);
      if(type1.equals(type2)){
         return (R)type1;
      }
      if(symTab.isClass(type1) && symTab.isClass(type2)){
         String terType = symTab.ternaryCheck(type1,type2);
         if(!terType.equals("")){
            return (R)terType;
         }
      }
      //System.out.println("From ter2:" + type1 +" " + type2);
      this.error();
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      String temp = new String();
      String exprType = (String)n.f0.accept(this, argu);
      exprList = exprList + exprType + ",";
      //System.out.println("From exprlist0:" +exprType);
      n.f1.accept(this, argu);
      temp = exprList;
      exprList = "";
      //System.out.println("From exprlist5:" +temp);
      return (R) (temp);
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      n.f0.accept(this, argu);
      String exprType = (String)n.f1.accept(this, argu);
      exprList = exprList + exprType + ",";
      return (R)"";
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      String primType = (String)n.f0.accept(this, (A)"getIdType");
      return (R)primType;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "int";
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      String id = (String)n.f0.accept(this, argu);
      if(argu != null){
         if(((String)argu).equals("getId")){
            return (R) id;
         }
         if(((String)argu).equals("getIdType")){
            String idType = symTab.getIdType(id);
            if(idType == null){
               //System.out.println("From id:");
               this.error();
            }
            return (R) idType;
         }
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) symTab.currScope.className;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String exprType = (String)n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(exprType.equals("int")){
         return (R)"int[]";
      }
      //System.out.println("From arrallocexpr:" + exprType);
      this.error();
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String)n.f1.accept(this, (A)"getId");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(symTab.isClass(id)){
         return (R) id;
      }
      //System.out.println("From allocExp:" + id);
      this.error();
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String exprType = (String)n.f1.accept(this, argu);
      if(exprType.equals("boolean")){
         return (R)"boolean";
      }
      //System.out.println("From not:" + exprType);
      this.error();
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String exprType = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)exprType;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
    //UNUSED*******************
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */    
    //UNUSED*******************
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
