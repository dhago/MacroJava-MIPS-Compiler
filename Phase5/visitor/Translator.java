//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Translator<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   boolean printLab = false;
   int se_type = -1;
   int exp_type = -1;
   int extras = 0;
   boolean move_se = false;
   public void error(){
      System.out.println("Error");
      System.exit(0);
   }
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println("\t.text");
      System.out.println("\t.globl       main");
      System.out.println("main:");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      int argc = Integer.parseInt((String)n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      int stack_spc = Integer.parseInt((String)n.f5.accept(this, argu));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      int max_call = Integer.parseInt((String)n.f8.accept(this, argu));
      n.f9.accept(this, argu);

      System.out.println("\tmove $fp $sp");
      System.out.println("\tsw $ra, -4($sp)");
      System.out.println("\tsubu $sp, $sp, "+Integer.toString((stack_spc+1)*4));
      extras = 1;

      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      System.out.println("\taddu $sp, $sp, "+Integer.toString((stack_spc+1)*4));
      System.out.println("\tlw $ra, -4($fp)");
      System.out.println("\tjal _exitret\n\n");
      
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      System.out.println(".text \n.globl _halloc \n_halloc: \n\tli $v0, 9 \n\tsyscall \n\tjr $ra");
      System.out.println("\n\n.text \n.globl _error  \n_error:  \n\tla $a0, error_msg \n\tli $v0, 4 \n\tsyscall \n\tli $v0, 10 \n\tsyscall \n");
      System.out.println("\n\n.text \n.globl _print  \n_print:  \n\tli $v0, 1 \n\tsyscall \n\tla $a0, newline \n\tli $v0, 4 \n\tsyscall \n\tjr $ra");
      System.out.println("\n\n.text \n.globl _exitret  \n_exitret:  \n\tli $v0, 10 \n\tsyscall");
      System.out.println("\n\n.data \n.align 0 \nnewline: .asciiz \"\\n\" ");
      System.out.println("\n\n.data \n.align 0 \nerror_msg: .asciiz \" ERROR : Abnormally terminated!\\n\"");
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      printLab = true;
      n.f0.accept(this, argu);
      printLab = false;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String fname = (String)n.f0.accept(this, argu);
      System.out.println("\t.text");
      System.out.println("\t.globl       "+fname);
      System.out.println(fname+":");
      n.f1.accept(this, argu);
      int argc = Integer.parseInt((String)n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      int stack_spc = Integer.parseInt((String)n.f5.accept(this, argu));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      int max_call = Integer.parseInt((String)n.f8.accept(this, argu));
      n.f9.accept(this, argu);

      System.out.println("\tsw $fp, -8($sp)");
      System.out.println("\tmove $fp $sp");
      System.out.println("\tsw $ra, -4($sp)");
      System.out.println("\tsubu $sp, $sp, "+Integer.toString((stack_spc+2)*4));
      extras = 2;

      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      System.out.println("\taddu $sp, $sp, "+Integer.toString((stack_spc+2)*4));
      System.out.println("\tlw $ra, -4($fp)");
      System.out.println("\tlw $fp, -8($fp)");
      System.out.println("\tjr $ra\n\n");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      printLab = false;
      n.f0.accept(this, argu);
      printLab = true;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("\tnop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("\tb _error");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      String lab = (String)n.f2.accept(this, argu);
      System.out.println("\tbeqz "+reg +", " + lab);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lab = (String)n.f1.accept(this, argu);
      System.out.println("\tb " + lab);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg_dest = (String)n.f1.accept(this, argu);
      String off = (String)n.f2.accept(this, argu);
      String reg_src = (String)n.f3.accept(this, argu);
      System.out.println("\tsw "+ reg_src + ", " + off + "("+ reg_dest + ")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg_dest = (String)n.f1.accept(this, argu);
      String reg_src = (String)n.f2.accept(this, argu);
      String off = (String)n.f3.accept(this, argu);
      System.out.println("\tlw "+ reg_dest + ", " + off + "("+ reg_src + ")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      exp_type = -1;
      move_se = true;
      n.f2.accept(this, (A)reg);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      se_type = -1;
      move_se = false;
      String se = (String)n.f1.accept(this, argu);
      switch (se_type){
         case 1: System.out.println("\tmove $a0, "+ se); break;
         case 2: System.out.println("\tli $a0, "+se); break;
         case 3: System.out.println("\tla $a0, "+se); break;
         default : System.out.println("Invalid simple expr"); error(); break;
      }
      System.out.println("\tjal _print"); 
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      String i = (String)n.f2.accept(this, argu);
      int sp = Integer.parseInt(i);
      System.out.println("\tlw "+ reg + ", "+   Integer.toString(-(sp+extras+1)*4) + "($fp)");
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String i = (String)n.f1.accept(this, argu);
      String reg = (String)n.f2.accept(this, argu);
      int sp = Integer.parseInt(i);
      System.out.println("\tsw "+ reg + ", "+   Integer.toString(-(sp+extras+1)*4) + "($fp)");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String i = (String)n.f1.accept(this, argu);
      String reg = (String)n.f2.accept(this, argu);
      int sp = Integer.parseInt(i);
      System.out.println("\tsw "+ reg + ", "+   Integer.toString(-(sp+2)*4) + "($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      se_type = -1;
      move_se = false;
      String se = (String)n.f1.accept(this, argu);
      switch (se_type){
         case 1: System.out.println("\tjalr "+ se); break;
         case 2: System.out.println("\tInvalid call"); error(); break;
         case 3: System.out.println("\tjal "+se); break;
         default : System.out.println("Invalid call"); error(); break;
      }
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      exp_type = 3;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      exp_type = 1;
      move_se = false;
      String reg = (String)argu;
      n.f0.accept(this, argu);
      se_type = -1;
      String se = (String)n.f1.accept(this, argu);
      switch (se_type){
         case 1: System.out.println("\tmove $a0, "+ se); break;
         case 2: System.out.println("\tli $a0, "); break;
         case 3: System.out.println("\tInvalid halloc"); error(); break;
         default : System.out.println("\tInvalid halloc"); error(); break;
      }
      System.out.println("\tjal _halloc");
      System.out.println("\tmove "+ reg + ", $v0");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      exp_type = 2;
      move_se = false;
      String final_reg = (String)argu;
      String op = (String)n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      se_type = -1;
      String se = (String)n.f2.accept(this, argu);
      if(se_type == 3 || se_type == -1){
         System.out.println("Operand incorrect");
         error();
      }
      switch (op){
         case "LE"   : System.out.println("\tsle "+ final_reg + ", "+ reg + ", " + se); break;
         case "NE"   : System.out.println("\tsne "+ final_reg + ", "+ reg + ", " + se); break;
         case "PLUS" : System.out.println("\tadd "+ final_reg + ", "+ reg + ", " + se);break;
         case "MINUS": System.out.println("\tsub "+ final_reg + ", "+ reg + ", " + se);break;
         case "TIMES"  : System.out.println("\tmul "+ final_reg + ", "+ reg + ", " + se);break;
         case "DIV"  : System.out.println("\tdiv "+ final_reg + ", "+ reg + ", " + se);break;
         default :System.out.println("Unknown operator "); error();break;
      }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      //R _ret=null;
      String s = (String)n.f0.accept(this, argu);
      return (R)s;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      //R _ret=null;
      n.f0.accept(this, argu);
      String i = (String)n.f1.accept(this, argu);
      return (R)i;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      //R _ret=null;
      String reg = (String)argu;
      String se = (String)n.f0.accept(this, (A)"fromSE");
      if(move_se){
         switch (se_type){
            case 1: System.out.println("\tmove "+ reg + ", " + se); break;
            case 2: System.out.println("\tli "+ reg + ", " + se); break;
            case 3: System.out.println("\tla "+ reg + ", " + se); break;
            default : System.out.println("Invalid move"); error(); break;
         }
      }
      return (R)se;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      //R _ret=null;
      String reg = (String)n.f0.accept(this, argu);
      if(argu != null){
         if(((String)argu).equals("fromSE")){
            se_type = 1;
         }
      }
      return (R)("$"+reg);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      //R _ret=null;
      String i = (String)n.f0.accept(this, argu);
      if(argu != null){
         if(((String)argu).equals("fromSE")){
            se_type = 2;
         }
      }
      return (R)i;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      //R _ret=null;
      String lab = (String)n.f0.accept(this, argu);
      if(printLab){
         System.out.println(lab+":");
      }
      if(argu != null){
         if(((String)argu).equals("fromSE")){
            se_type = 3;
         }
      }
      printLab = false;
      return (R)lab;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
